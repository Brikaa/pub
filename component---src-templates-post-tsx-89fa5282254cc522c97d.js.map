{"version":3,"sources":["webpack:///./src/templates/post.tsx"],"names":["pageQuery","BlogPostTemplate","_ref","data","pageContext","defaultAvatarImage","useDefaultAvatarImage","defaultPostImage","useDefaultPostImage","siteMetadata","useSiteMetadata","post","markdownRemark","excerpt","frontmatter","fields","title","tags","date","author","image","previous","next","slug","avatar","childImageSharp","react__WEBPACK_IMPORTED_MODULE_1__","_components_shared__WEBPACK_IMPORTED_MODULE_3__","description","twitter","name","urlSlug","siteUrl","fluid","src","pageType","publishedAt","Date","toISOString","keywords","_components_blog__WEBPACK_IMPORTED_MODULE_2__","height","body","html","prefix"],"mappings":"uLAoDaA,EAAS,aA8FPC,UAvD2C,SAAAC,GAGpD,IAFJC,EAEID,EAFJC,KACAC,EACIF,EADJE,YAEMC,EAAqBC,cACrBC,EAAmBC,cACnBC,EAAeC,cACfC,EAAOR,EAAKS,eACVC,EAAiCF,EAAjCE,QAASC,EAAwBH,EAAxBG,YAAaC,EAAWJ,EAAXI,OACtBC,EAAqCF,EAArCE,MAAOC,EAA8BH,EAA9BG,KAAMC,EAAwBJ,EAAxBI,KAAMC,EAAkBL,EAAlBK,OAAQC,EAAUN,EAAVM,MAC3BC,EAAmBjB,EAAnBiB,SAAUC,EAASlB,EAATkB,KACVC,EAASR,EAATQ,KAQR,OANKJ,EAAOK,SACVL,EAAOK,OAAS,CACdC,gBAAiBpB,EAAmBoB,kBAKtCC,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACC,EAAA,EAAD,CACEX,MAAOA,EACPY,YAAajB,EAAKE,QAClBgB,QAASV,EAAOU,QAChBV,OAAQA,EAAOW,KACfC,QAAO,QAAUR,EAAV,IACPH,MAAOX,EAAauB,QAAUZ,EAAMK,gBAAgBQ,MAAMC,IAC1DC,SAAS,UACTC,YAAa,IAAIC,KAAKnB,GAAMoB,cAC5BC,SAAUtB,IAGZS,EAAA,cAACc,EAAA,EAAD,CACExB,MAAOA,EACPiB,MACEb,EACIA,EAAMK,gBAAgBQ,MACtB1B,EAAiBkB,gBAAgBQ,MAEvCQ,OAAO,SAGTf,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACc,EAAA,EAAD,CAAUtB,KAAMA,EAAMC,OAAQA,IAC9BO,EAAA,cAACC,EAAA,EAAD,CAAUe,KAAM/B,EAAKgC,OACpB1B,GAAQS,EAAA,cAACc,EAAA,EAAD,CAAUvB,KAAMA,IACzBS,EAAA,cAACc,EAAA,EAAD,CAAO7B,KAAM,CAAEK,QAAOO,OAAMV,cAG9Ba,EAAA,cAACc,EAAA,EAAD,CAAWI,OAAO,OAAOvB,SAAUA,EAAUC,KAAMA","file":"component---src-templates-post-tsx-89fa5282254cc522c97d.js","sourcesContent":["import { graphql } from 'gatsby';\nimport { FluidObject } from 'gatsby-image';\nimport * as React from 'react';\n\nimport { Hero, PostLinks, PostMeta, PostTags, Share } from '@components/blog';\nimport { Container, Layout, PageBody, Seo } from '@components/shared';\nimport {\n  useDefaultAvatarImage,\n  useDefaultPostImage,\n  useSiteMetadata,\n} from '@hooks';\n\nexport interface PostNode {\n  id: string;\n  excerpt: string;\n  fields: { slug: string };\n  html: string;\n  frontmatter: {\n    title: string;\n    date: string;\n    tags?: string[];\n    author: Author;\n    image: {\n      childImageSharp: {\n        fluid: FluidObject;\n      };\n    };\n  };\n}\nexport interface Author {\n  id: string;\n  name: string;\n  github: string;\n  twitter?: string;\n  bio?: string;\n  avatar?: {\n    childImageSharp: {\n      fluid: FluidObject;\n    };\n  };\n}\n\ninterface BlogPostTemplateProps {\n  data: {\n    markdownRemark: PostNode;\n  };\n  pageContext: {\n    previous: PostNode;\n    next: PostNode;\n  };\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      fields {\n        slug\n      }\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        tags\n        author {\n          id\n          name\n          bio\n          github\n          avatar {\n            childImageSharp {\n              fluid(maxWidth: 68) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n        image {\n          childImageSharp {\n            fluid(maxWidth: 1800) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n/** Used by Gatsby to display a single blog post. */\nconst BlogPostTemplate: React.FC<BlogPostTemplateProps> = ({\n  data,\n  pageContext,\n}) => {\n  const defaultAvatarImage = useDefaultAvatarImage();\n  const defaultPostImage = useDefaultPostImage();\n  const siteMetadata = useSiteMetadata();\n  const post = data.markdownRemark;\n  const { excerpt, frontmatter, fields } = post;\n  const { title, tags, date, author, image } = frontmatter;\n  const { previous, next } = pageContext;\n  const { slug } = fields;\n\n  if (!author.avatar) {\n    author.avatar = {\n      childImageSharp: defaultAvatarImage.childImageSharp,\n    };\n  }\n\n  return (\n    <Layout>\n      <Seo\n        title={title}\n        description={post.excerpt}\n        twitter={author.twitter}\n        author={author.name}\n        urlSlug={`blog/${slug}/`}\n        image={siteMetadata.siteUrl + image.childImageSharp.fluid.src}\n        pageType=\"article\"\n        publishedAt={new Date(date).toISOString()}\n        keywords={tags}\n      />\n\n      <Hero\n        title={title}\n        fluid={\n          image\n            ? image.childImageSharp.fluid\n            : defaultPostImage.childImageSharp.fluid\n        }\n        height=\"50vh\"\n      />\n\n      <Container>\n        <PostMeta date={date} author={author} />\n        <PageBody body={post.html} />\n        {tags && <PostTags tags={tags} />}\n        <Share post={{ title, slug, excerpt }} />\n      </Container>\n\n      <PostLinks prefix=\"blog\" previous={previous} next={next} />\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n"],"sourceRoot":""}