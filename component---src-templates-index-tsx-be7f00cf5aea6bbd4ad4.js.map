{"version":3,"sources":["webpack:///./src/templates/index.tsx","webpack:///./src/components/seo.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","n","_components_card__WEBPACK_IMPORTED_MODULE_2__","_components_card_list__WEBPACK_IMPORTED_MODULE_3__","_components_container__WEBPACK_IMPORTED_MODULE_4__","_components_layout__WEBPACK_IMPORTED_MODULE_5__","_components_pagination__WEBPACK_IMPORTED_MODULE_6__","_components_seo__WEBPACK_IMPORTED_MODULE_7__","IndexTemplate","_ref","data","pageContext","posts","allMarkdownRemark","edges","currentPage","isFirstPage","title","keywords","a","map","_ref2","i","node","featured","key","fields","slug","excerpt","fluid","frontmatter","image","childImageSharp","file","publishDate","date","context","Seo","props","react__WEBPACK_IMPORTED_MODULE_2__","gatsby__WEBPACK_IMPORTED_MODULE_1__","query","render","description","lang","meta","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","name","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps"],"mappings":"0FAEAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAA,KAAAO,EAAAP,EAAAQ,EAAAF,GAAAG,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAAAc,EAAAd,EAAA,KAoDaI,EAAS,aAqFPW,UA3CoD,SAAAC,GAG7D,IAFJC,EAEID,EAFJC,KACAC,EACIF,EADJE,YAEMC,EAAQF,EAAKG,kBAAkBC,MAC7BC,EAAgBJ,EAAhBI,YACFC,EAA8B,IAAhBD,EAEpB,OACEjB,EAAA,cAACO,EAAA,EAAD,KACEP,EAAA,cAACS,EAAA,EAAD,CAAKU,MAAM,OAAOC,SAAU,CAAC,OAAQ,SAAU,aAAc,YAE3DF,GACAlB,EAAA,cAACE,EAAAmB,EAAD,KACErB,EAAA,mCAAgBiB,IAIpBjB,EAAA,cAACM,EAAA,EAAD,KACEN,EAAA,cAACK,EAAA,EAAD,KACGS,EAAMQ,IAAI,SAAAC,EAAWC,GAAX,IAAGC,EAAHF,EAAGE,KAAH,OACTzB,EAAA,cAACI,EAAA,EAAD,CACEsB,SAAUR,GAAqB,IAANM,EACzBG,IAAKF,EAAKG,OAAOC,KACjBA,KAAMJ,EAAKG,OAAOC,KAClBC,QAASL,EAAKK,QACdC,MACEN,EAAKO,YAAYC,MACbR,EAAKO,YAAYC,MAAMC,gBAAgBH,MACvCnB,EAAKuB,KAAKD,gBAAgBH,MAEhCK,YAAaX,EAAKO,YAAYK,KAC9BlB,MAAOM,EAAKO,YAAYb,OAASM,EAAKG,OAAOC,WAMrD7B,EAAA,cAACQ,EAAA,EAAD,CAAY8B,QAASzB,uFCrC3B,IAAM0B,EAAyC,SAACC,GAAD,OAC7CC,EAAA,cAACC,EAAA,EAAD,CAAaC,MA5EG,aA4EkBC,QAhEpCjC,EAgEyD6B,EA/DvDK,EAK4ClC,EAL5CkC,YACAzB,EAI4CT,EAJ5CS,SACA0B,EAG4CnC,EAH5CmC,KACAC,EAE4CpC,EAF5CoC,KACA5B,EAC4CR,EAD5CQ,MAEO,SAACP,GACN,IAAMoC,EAAkBH,GAAejC,EAAKqC,KAAKC,aAAaL,YAE9D,OACEJ,EAAA,cAACU,EAAA9B,EAAD,CACE+B,eAAgB,CAAEN,QAClB3B,MAAOA,EACPkC,cAAa,QAAUzC,EAAKqC,KAAKC,aAAa/B,MAC9C4B,KAAM,CACJ,CACEO,QAASN,EACTO,KAAM,eAER,CACED,QAASnC,EACTqC,SAAU,YAEZ,CACEF,QAASN,EACTQ,SAAU,kBAEZ,CACEF,QAAS,UACTE,SAAU,WAEZ,CACEF,QAAS,UACTC,KAAM,gBAER,CACED,QAAS1C,EAAKqC,KAAKC,aAAaO,OAChCF,KAAM,mBAER,CACED,QAASnC,EACToC,KAAM,iBAER,CACED,QAASN,EACTO,KAAM,wBAGPG,OACCtC,EAASuC,OAAS,EACd,CACEL,QAASlC,EAASwC,KAAK,MACvBL,KAAM,YAER,IAELG,OAAOX,OAOhBnC,KAAAiD,IAhEF,IAAAlD,EACEkC,EACAzB,EACA0B,EACAC,EACA5B,GA8DFoB,EAAIuB,aAAe,CACjB1C,SAAU,GACV0B,KAAM,KACNC,KAAM,IAGOR","file":"component---src-templates-index-tsx-be7f00cf5aea6bbd4ad4.js","sourcesContent":["import { graphql } from 'gatsby';\nimport { FluidObject } from 'gatsby-image';\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\n\nimport Card from '@components/card';\nimport CardList from '@components/card-list';\nimport Container from '@components/container';\nimport Layout from '@components/layout';\nimport Pagination from '@components/pagination';\nimport Seo from '@components/seo';\n\ninterface PostNode {\n  node: {\n    excerpt: string;\n    frontmatter: {\n      date: string;\n      title: string;\n      image: {\n        childImageSharp: {\n          fluid: FluidObject;\n        };\n      };\n    };\n    fields: {\n      slug: string;\n    };\n  };\n}\n\ninterface IndexTemplateProps {\n  data: {\n    site: {\n      siteMetadata: {\n        siteName: string;\n      };\n    };\n    file: {\n      childImageSharp: {\n        fluid: FluidObject;\n      };\n    };\n    allMarkdownRemark: {\n      edges: PostNode[];\n    };\n  };\n  pageContext: {\n    limit?: number;\n    skip?: number;\n    numPages?: number;\n    currentPage?: number;\n  };\n}\n\nexport const pageQuery = graphql`\n  query($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    file(relativePath: { eq: \"default-post-image.jpg\" }) {\n      childImageSharp {\n        fluid(maxWidth: 1800) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 80)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst IndexTemplate: React.FunctionComponent<IndexTemplateProps> = ({\n  data,\n  pageContext,\n}) => {\n  const posts = data.allMarkdownRemark.edges;\n  const { currentPage } = pageContext;\n  const isFirstPage = currentPage === 1;\n\n  return (\n    <Layout>\n      <Seo title=\"Home\" keywords={['blog', 'gatsby', 'typescript', 'react']} />\n\n      {!isFirstPage && (\n        <Helmet>\n          <title>{`Page ${currentPage}`}</title>\n        </Helmet>\n      )}\n\n      <Container>\n        <CardList>\n          {posts.map(({ node }, i) => (\n            <Card\n              featured={isFirstPage && i === 0}\n              key={node.fields.slug}\n              slug={node.fields.slug}\n              excerpt={node.excerpt}\n              fluid={\n                node.frontmatter.image\n                  ? node.frontmatter.image.childImageSharp.fluid\n                  : data.file.childImageSharp.fluid\n              }\n              publishDate={node.frontmatter.date}\n              title={node.frontmatter.title || node.fields.slug}\n            />\n          ))}\n        </CardList>\n      </Container>\n\n      <Pagination context={pageContext} />\n    </Layout>\n  );\n};\n\nexport default IndexTemplate;\n","import { graphql, StaticQuery } from 'gatsby';\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\n\ninterface Data {\n  site: {\n    siteMetadata: {\n      title: string;\n      description: string;\n      author: string;\n    };\n  };\n}\n\ninterface SeoProps {\n  description?: string;\n  lang?: string;\n  meta?: any[];\n  keywords?: string[];\n  title: string;\n}\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n\nfunction renderHelmet({\n  description,\n  keywords,\n  lang,\n  meta,\n  title,\n}: SeoProps): (data: Data) => React.ReactNode {\n  return (data) => {\n    const metaDescription = description || data.site.siteMetadata.description;\n\n    return (\n      <Helmet\n        htmlAttributes={{ lang }}\n        title={title}\n        titleTemplate={`%s - ${data.site.siteMetadata.title}`}\n        meta={[\n          {\n            content: metaDescription,\n            name: 'description',\n          },\n          {\n            content: title,\n            property: 'og:title',\n          },\n          {\n            content: metaDescription,\n            property: 'og:description',\n          },\n          {\n            content: 'website',\n            property: 'og:type',\n          },\n          {\n            content: 'summary',\n            name: 'twitter:card',\n          },\n          {\n            content: data.site.siteMetadata.author,\n            name: 'twitter:creator',\n          },\n          {\n            content: title,\n            name: 'twitter:title',\n          },\n          {\n            content: metaDescription,\n            name: 'twitter:description',\n          },\n        ]\n          .concat(\n            keywords.length > 0\n              ? {\n                  content: keywords.join(', '),\n                  name: 'keywords',\n                }\n              : [],\n          )\n          .concat(meta)}\n      />\n    );\n  };\n}\n\nconst Seo: React.FunctionComponent<SeoProps> = (props) => (\n  <StaticQuery query={detailsQuery} render={renderHelmet(props)} />\n);\n\nSeo.defaultProps = {\n  keywords: [],\n  lang: 'en',\n  meta: [],\n};\n\nexport default Seo;\n"],"sourceRoot":""}