{"version":3,"sources":["webpack:///./src/templates/post.tsx"],"names":["pageQuery","BlogPostTemplate","_ref","data","pageContext","allFileNodes","allFile","nodes","post","markdownRemark","excerpt","frontmatter","fields","title","tags","date","author","image","previous","next","slug","defaultImages","forEach","_ref2","name","childImageSharp","avatar","react__WEBPACK_IMPORTED_MODULE_1__","_components__WEBPACK_IMPORTED_MODULE_2__","description","twitter","urlSlug","pageType","fluid","height","body","html","prefix"],"mappings":"oKAgEaA,EAAS,aAyGPC,UAxD2C,SAAAC,GAGpD,IAFJC,EAEID,EAFJC,KACAC,EACIF,EADJE,YAEMC,EAAeF,EAAKG,QAAQC,MAC5BC,EAAOL,EAAKM,eACVC,EAAiCF,EAAjCE,QAASC,EAAwBH,EAAxBG,YAAaC,EAAWJ,EAAXI,OACtBC,EAAqCF,EAArCE,MAAOC,EAA8BH,EAA9BG,KAAMC,EAAwBJ,EAAxBI,KAAMC,EAAkBL,EAAlBK,OAAQC,EAAUN,EAAVM,MAC3BC,EAAmBd,EAAnBc,SAAUC,EAASf,EAATe,KACVC,EAASR,EAATQ,KAEFC,EAA2D,GAYjE,OAVAhB,EAAaiB,QACX,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,gBAAT,OAAgCJ,EAAcG,GAAQC,IAGnDT,EAAOU,SACVV,EAAOU,OAAS,CACdD,gBAAiBJ,EAAc,0BAKjCM,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACC,EAAA,EAAD,CACEf,MAAOA,EACPgB,YAAarB,EAAKE,QAClBoB,QAASd,EAAOc,QAChBd,OAAQA,EAAOQ,KACfO,QAASX,EACTY,SAAS,YAGXL,EAAA,cAACC,EAAA,EAAD,CACEf,MAAOA,EACPoB,MACEhB,EACIA,EAAMQ,gBAAgBQ,MACtBZ,EAAc,sBAAsBY,MAE1CC,OAAO,SAGTP,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACC,EAAA,EAAD,CAAUb,KAAMA,EAAMC,OAAQA,IAC9BW,EAAA,cAACC,EAAA,EAAD,CAAUO,KAAM3B,EAAK4B,OACpBtB,GAAQa,EAAA,cAACC,EAAA,EAAD,CAAUd,KAAMA,IACzBa,EAAA,cAACC,EAAA,EAAD,CAAOpB,KAAM,CAAEK,QAAOO,OAAMV,cAG9BiB,EAAA,cAACC,EAAA,EAAD,CAAWS,OAAO,OAAOnB,SAAUA,EAAUC,KAAMA","file":"component---src-templates-post-tsx-ce245225c91765dadd13.js","sourcesContent":["import { graphql } from 'gatsby';\nimport { FluidObject } from 'gatsby-image';\nimport * as React from 'react';\n\nimport {\n  Container,\n  Hero,\n  Layout,\n  PageBody,\n  PostLinks,\n  PostMeta,\n  PostTags,\n  Seo,\n  Share,\n} from '@components';\n\nexport interface PostNode {\n  id: string;\n  excerpt: string;\n  fields: { slug: string };\n  html: string;\n  frontmatter: {\n    title: string;\n    date: string;\n    tags?: string[];\n    author: Author;\n    image: {\n      childImageSharp: {\n        fluid: FluidObject;\n      };\n    };\n  };\n}\nexport interface Author {\n  id: string;\n  name: string;\n  github: string;\n  twitter?: string;\n  bio?: string;\n  avatar?: {\n    childImageSharp: {\n      fluid: FluidObject;\n    };\n  };\n}\n\ninterface BlogPostTemplateProps {\n  data: {\n    allFile: {\n      nodes: {\n        name: string;\n        childImageSharp: {\n          fluid: FluidObject;\n        };\n      }[];\n    };\n    markdownRemark: PostNode;\n  };\n  pageContext: {\n    previous: PostNode;\n    next: PostNode;\n  };\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    allFile(filter: { absolutePath: { regex: \"/images/default/\" } }) {\n      nodes {\n        name\n        childImageSharp {\n          fluid(maxWidth: 1800) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      fields {\n        slug\n      }\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        tags\n        author {\n          id\n          name\n          bio\n          github\n          avatar {\n            childImageSharp {\n              fluid(maxWidth: 68) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n        image {\n          childImageSharp {\n            fluid(maxWidth: 1800) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n/** Used by Gatsby to display a single blog post. */\nconst BlogPostTemplate: React.FC<BlogPostTemplateProps> = ({\n  data,\n  pageContext,\n}) => {\n  const allFileNodes = data.allFile.nodes;\n  const post = data.markdownRemark;\n  const { excerpt, frontmatter, fields } = post;\n  const { title, tags, date, author, image } = frontmatter;\n  const { previous, next } = pageContext;\n  const { slug } = fields;\n  // @TODO+author.tsx: Create new StaticQuery hook, e.g. useDefaultImage\n  const defaultImages: { [key: string]: { fluid: FluidObject } } = {};\n\n  allFileNodes.forEach(\n    ({ name, childImageSharp }) => (defaultImages[name] = childImageSharp),\n  );\n\n  if (!author.avatar) {\n    author.avatar = {\n      childImageSharp: defaultImages['default-avatar-image'],\n    };\n  }\n\n  return (\n    <Layout>\n      <Seo\n        title={title}\n        description={post.excerpt}\n        twitter={author.twitter}\n        author={author.name}\n        urlSlug={slug}\n        pageType=\"article\"\n      />\n\n      <Hero\n        title={title}\n        fluid={\n          image\n            ? image.childImageSharp.fluid\n            : defaultImages['default-post-image'].fluid\n        }\n        height=\"50vh\"\n      />\n\n      <Container>\n        <PostMeta date={date} author={author} />\n        <PageBody body={post.html} />\n        {tags && <PostTags tags={tags} />}\n        <Share post={{ title, slug, excerpt }} />\n      </Container>\n\n      <PostLinks prefix=\"blog\" previous={previous} next={next} />\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n"],"sourceRoot":""}