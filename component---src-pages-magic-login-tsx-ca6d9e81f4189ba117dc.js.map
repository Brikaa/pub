{"version":3,"sources":["webpack:///./src/pages/magic-login.tsx"],"names":["MagicLoginPage","location","useLocation","authContext","useContext","AuthContext","useState","message","setMessage","siteMetadata","useSiteMetadata","useEffect","token","URLSearchParams","search","get","setTimeout","a","signIn","email","password","response","SessionStorageHelper","storeJwt","data","navigate","title","description","urlSlug"],"mappings":"iPA+DeA,UA9CY,WACzB,IAAMC,EAAWC,wBACXC,EAAcC,qBAAWC,KAFA,EAGDC,mBAAS,iBAAhCC,EAHwB,KAGfC,EAHe,KAIzBC,EAAeC,cA4BrB,OAJAC,qBAAU,WAtBU,IAACC,IAuBP,IAAIC,gBAAgBZ,EAASa,QAAQC,IAAI,SArBrDC,WAAU,sBAAC,8BAAAC,EAAA,yDACK,KAAVL,GAA0B,OAAVA,EADX,uBAEPJ,EAAW,wBAFJ,6DAOiBL,EAAYe,cAP7B,aAOiB,OAAAf,EAAqB,CAC3CgB,MAAO,QACPC,SAAUR,IATL,OAODS,EAPC,OAYPC,IAAqBC,SAASF,EAASG,MACvCC,mBAAS,cAbF,kDAePjB,EAAW,KAAID,SAfR,0DAiBR,QAQH,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEmB,MAAK,cACLC,YAAW,wBAA0BlB,EAAaiB,MAAvC,WACXE,QAAQ,iBAEV,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAYrB,GACZ,kBAAC,IAAD","file":"component---src-pages-magic-login-tsx-ca6d9e81f4189ba117dc.js","sourcesContent":["import { useLocation } from '@reach/router';\nimport React, { FC, useState, useContext, useEffect } from 'react';\nimport { navigate } from 'gatsby';\n\nimport { ApiResponse, ErrorResponse, JwtToken } from '@api';\nimport {\n  Container,\n  Layout,\n  PageTitle,\n  PageBody,\n  Seo,\n} from '@components/shared';\nimport { useSiteMetadata } from '@hooks';\nimport { SessionStorageHelper } from '@helpers';\nimport { AuthContext } from '@contexts';\n\n/** Page allows members to login via magic link method */\nconst MagicLoginPage: FC = () => {\n  const location = useLocation();\n  const authContext = useContext(AuthContext);\n  const [message, setMessage] = useState('Logging in...');\n  const siteMetadata = useSiteMetadata();\n\n  const handleLogin = (token: string | null) => {\n    // Adding 600ms set timeout to allow user to view messages\n    setTimeout(async () => {\n      if (token === '' || token === null) {\n        setMessage('Login token missing.');\n        return;\n      }\n\n      try {\n        const response = (await authContext.signIn?.({\n          email: 'token',\n          password: token,\n        })) as ApiResponse<JwtToken | ErrorResponse>;\n\n        SessionStorageHelper.storeJwt(response.data as JwtToken);\n        navigate('/projects/');\n      } catch (err) {\n        setMessage(err.message);\n      }\n    }, 600);\n  };\n\n  useEffect(() => {\n    handleLogin(new URLSearchParams(location.search).get('token'));\n  });\n\n  return (\n    <Layout>\n      <Seo\n        title={`Magic Login`}\n        description={`Magic login page for ${siteMetadata.title} website`}\n        urlSlug=\"magin-login/\"\n      />\n      <Container>\n        <PageTitle>{message}</PageTitle>\n        <PageBody />\n      </Container>\n    </Layout>\n  );\n};\nexport default MagicLoginPage;\n"],"sourceRoot":""}