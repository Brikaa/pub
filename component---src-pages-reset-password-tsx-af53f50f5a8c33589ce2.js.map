{"version":3,"sources":["webpack:///./src/components/shared/form/reset-password.tsx","webpack:///./src/pages/reset-password.tsx"],"names":["Wrapper","styled","section","theme","colors","boxes","padding","smallTop","sizes","width","medium","small","FormMessage","props","isValid","ResetPasswordForm","useState","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","formValid","setFormValid","formMessage","setFormMessage","useEffect","token","handleClick","a","auth","ServiceResolver","authResolver","passwordReset","validationToken","resetPassword","navigate","message","heading","subheading","htmlFor","name","id","type","onChange","e","target","value","statusText","ResetPasswordPage","siteMetadata","useSiteMetadata","location","useLocation","title","description","urlSlug","URLSearchParams","search","get"],"mappings":"4aAaA,IAAMA,EAAUC,IAAOC,QAAV,6EAAGD,CAAH,6IACS,qBAAGE,MAAkBC,OAAOF,WAErC,qBAAGC,MAAkBE,MAAMC,QAAQJ,QAAQK,YAEvB,qBAAGJ,MAAkBK,MAAMC,MAAMC,UAIjC,qBAAGP,MAAkBK,MAAMC,MAAME,SACnD,qBAAGR,MAAkBE,MAAMC,QAAQJ,QAAQS,SAMpDC,EAAcX,IAAOU,MAAV,iFAAGV,CAAH,gBACN,SAACY,GAAD,OAAYA,EAAMC,QAAU,GAAK,SAO/BC,EAAgD,SAACF,GAAU,MAChCG,mBAAiB,IAAhDC,EAD+D,KAClDC,EADkD,OAElBF,mBAAiB,IAA9DG,EAF+D,KAE3CC,EAF2C,OAGpCJ,oBAAS,GAApCK,EAH+D,KAGpDC,EAHoD,OAIhCN,mBAAS,IAAxCO,EAJ+D,KAIlDC,EAJkD,KAMtEC,qBAAU,WACY,OAAhBZ,EAAMa,OAAkC,KAAhBb,EAAMa,QAChCJ,GAAa,GACbE,EAAe,gDAEhB,CAACX,EAAMa,QAEV,IAAMC,EAAW,e,EAAA,G,EAAA,UAAG,8BAAAC,EAAA,yDACE,OAAhBf,EAAMa,MADQ,oDAKE,KAAhBT,GAA6C,KAAvBE,EALR,uBAMhBG,GAAa,GACbE,EAAe,kCAPC,6BAWdP,IAAgBE,EAXF,wBAYhBG,GAAa,GACbE,EAAe,+BAbC,kCAiBZK,EAAOC,kBAAgBC,eACvBC,EAA+B,CACnCf,cACAE,qBACAc,gBAAiBpB,EAAMa,OArBP,oBAyBVG,EAAKK,cAAcF,GAzBT,QA0BhBR,EAAe,yCACfW,mBAAS,WA3BO,mDA6BhBb,GAAa,GACbE,EAAe,KAAIY,SA9BH,0D,+KAAH,qDAkCjB,OACE,kBAACpC,EAAD,KACE,kBAAC,IAAD,CAAMqC,QAAQ,iBAAiBC,WAAW,4BACxC,kBAAC,IAAD,CAAWC,QAAQ,gBAAnB,gBACA,kBAAC,IAAD,CACEC,KAAK,eACLC,GAAG,eACHC,KAAK,WACLC,SAAU,SAACC,GACT1B,EAAe0B,EAAEC,OAAOC,OACxBxB,GAAa,GACbE,EAAe,OAInB,kBAAC,IAAD,CAAWe,QAAQ,wBAAnB,wBAGA,kBAAC,IAAD,CACEC,KAAK,uBACLC,GAAG,uBACHC,KAAK,WACLC,SAAU,SAACC,GACTxB,EAAsBwB,EAAEC,OAAOC,OAC/BxB,GAAa,GACbE,EAAe,OAIF,KAAhBD,GACC,kBAACX,EAAD,CAAaE,QAASO,GAAYE,GAGpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWI,YAAaA,EAAaoB,WAAW,gBAAhD,aC/FKC,UAhBe,WAC5B,IAAMC,EAAeC,cACfC,EAAWC,wBACjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAUJ,EAAaI,MAAlB,oBACLC,YAAW,2BAA6BL,EAAaI,MAA1C,WACXE,QAAQ,oBAEV,kBAAC,EAAD,CACE7B,MAAO,IAAI8B,gBAAgBL,EAASM,QAAQC,IAAI","file":"component---src-pages-reset-password-tsx-af53f50f5a8c33589ce2.js","sourcesContent":["import React, { FC, useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { ApiButton } from '../buttons/api-button';\nimport { ServiceResolver, ResetPassword } from '@api';\nimport {\n  FormLabel,\n  FormInput,\n  ButtonWrapper,\n} from '@components/shared/form/controls';\nimport { Form } from '@components/shared/form';\nimport { navigate } from 'gatsby';\n\nconst Wrapper = styled.section`\n  background-color: ${({ theme }) => theme.colors.section};\n\n  padding: ${({ theme }) => theme.boxes.padding.section.smallTop};\n\n  @media screen and(max-width: ${({ theme }) => theme.sizes.width.medium}) {\n    flex-direction: column;\n  }\n\n  @media screen and(max-width: ${({ theme }) => theme.sizes.width.small}) {\n    padding: ${({ theme }) => theme.boxes.padding.section.small};\n  }\n`;\n\n// TODO: Consider pulling FormMessage into Form since reporting\n// a message to user is common accross all app forms.\nconst FormMessage = styled.small<{ isValid: boolean }>`\n  color: ${(props) => (props.isValid ? '' : 'red')};\n`;\n\ninterface ResetPasswordFormProps {\n  token: string | null;\n}\n\nexport const ResetPasswordForm: FC<ResetPasswordFormProps> = (props) => {\n  const [newPassword, setNewPassword] = useState<string>('');\n  const [confirmNewPassword, setConfirmNewPassword] = useState<string>('');\n  const [formValid, setFormValid] = useState(true);\n  const [formMessage, setFormMessage] = useState('');\n\n  useEffect(() => {\n    if (props.token === null || props.token === '') {\n      setFormValid(false);\n      setFormMessage(\"Missing required 'token' query parameter.\");\n    }\n  }, [props.token]);\n\n  const handleClick = async () => {\n    if (props.token === null) {\n      return;\n    }\n\n    if (newPassword === '' || confirmNewPassword === '') {\n      setFormValid(false);\n      setFormMessage('Both password fields required.');\n      return;\n    }\n\n    if (newPassword !== confirmNewPassword) {\n      setFormValid(false);\n      setFormMessage('Password fields must match.');\n      return;\n    }\n\n    const auth = ServiceResolver.authResolver();\n    const passwordReset: ResetPassword = {\n      newPassword,\n      confirmNewPassword,\n      validationToken: props.token,\n    };\n\n    try {\n      await auth.resetPassword(passwordReset);\n      setFormMessage('Password reset. Redirecting to login.');\n      navigate('/signin');\n    } catch (err) {\n      setFormValid(false);\n      setFormMessage(err.message);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <Form heading=\"Reset Password\" subheading=\"Enter your new password.\">\n        <FormLabel htmlFor=\"new-password\">New Password</FormLabel>\n        <FormInput\n          name=\"new-password\"\n          id=\"new-password\"\n          type=\"password\"\n          onChange={(e) => {\n            setNewPassword(e.target.value);\n            setFormValid(true);\n            setFormMessage('');\n          }}\n        />\n\n        <FormLabel htmlFor=\"confirm-new-password\">\n          Confirm New Password\n        </FormLabel>\n        <FormInput\n          name=\"confirm-new-password\"\n          id=\"confirm-new-password\"\n          type=\"password\"\n          onChange={(e) => {\n            setConfirmNewPassword(e.target.value);\n            setFormValid(true);\n            setFormMessage('');\n          }}\n        />\n\n        {formMessage !== '' && (\n          <FormMessage isValid={formValid}>{formMessage}</FormMessage>\n        )}\n\n        <ButtonWrapper>\n          <ApiButton handleClick={handleClick} statusText=\"Resetting...\">\n            Reset\n          </ApiButton>\n        </ButtonWrapper>\n      </Form>\n    </Wrapper>\n  );\n};\n","import { useLocation } from '@reach/router';\nimport React, { FC } from 'react';\n\nimport { Layout, Seo } from '@components/shared';\nimport { useSiteMetadata } from '@hooks';\nimport { ResetPasswordForm } from '@components/shared/form/reset-password';\n\nconst ResetPasswordPage: FC = () => {\n  const siteMetadata = useSiteMetadata();\n  const location = useLocation();\n  return (\n    <Layout>\n      <Seo\n        title={`${siteMetadata.title} - Reset Password`}\n        description={`Reset Password page for ${siteMetadata.title} website`}\n        urlSlug=\"reset-password/\"\n      />\n      <ResetPasswordForm\n        token={new URLSearchParams(location.search).get('token')}\n      />\n    </Layout>\n  );\n};\nexport default ResetPasswordPage;\n"],"sourceRoot":""}