{"version":3,"sources":["webpack:///./src/templates/author.tsx"],"names":["authorQuery","AuthorTemplate","_ref","data","pageContext","siteMetadata","useSiteMetadata","author","authorYaml","allFileNodes","allFile","nodes","allMarkdownRemark","authorId","authorName","slug","currentPage","isFirstPage","defaultImages","forEach","_ref2","name","childImageSharp","avatar","react__WEBPACK_IMPORTED_MODULE_1__","_components__WEBPACK_IMPORTED_MODULE_3__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","a","title","property","content","data-react-helmet","url","map","_ref3","fields","excerpt","frontmatter","key","fluid","image","publishDate","date","prefix","context"],"mappings":"iMA8EaA,EAAW,aAiJTC,UA3FuC,SAAAC,GAGhD,IAFJC,EAEID,EAFJC,KACAC,EACIF,EADJE,YAEMC,EAAeC,cACfC,EAASJ,EAAKK,WACdC,EAAeN,EAAKO,QAAQC,MAC1BA,EAAUR,EAAKS,kBAAfD,MACAE,EAA4CT,EAA5CS,SAAUC,EAAkCV,EAAlCU,WAAYC,EAAsBX,EAAtBW,KAAMC,EAAgBZ,EAAhBY,YAC9BC,EAA8B,IAAhBD,EAEdE,EAA2D,GAYjE,OAVAT,EAAaU,QACX,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,gBAAT,OAAgCJ,EAAcG,GAAQC,IAGnDf,EAAOgB,SACVhB,EAAOgB,OAAS,CACdD,gBAAiBJ,EAAc,0BAKjCM,EAAA,cAACC,EAAA,EAAD,KACGR,EACCO,EAAA,cAACE,EAAAC,EAAD,KACEH,EAAA,uCAAoBV,EAApB,OAAqCT,EAAauB,OAElDJ,EAAA,sBACEK,SAAS,WACTC,QAAO,YAAchB,EAAd,OAA+BT,EAAauB,MACnDP,KAAK,QACLU,oBAAkB,SAGpBP,EAAA,sBACEK,SAAS,SACTC,QAAYzB,EAAa2B,IAAlB,gBAAqCjB,EAArC,IACPgB,oBAAkB,UAItBP,EAAA,cAACE,EAAAC,EAAD,KACEH,EAAA,uCAAoBV,EAApB,YAA0CE,EAA1C,MACEX,EAAauB,OAGfJ,EAAA,sBACEK,SAAS,WACTC,QAAO,YAAchB,EAAd,YAAoCE,EAApC,MACLX,EAAauB,MAEfP,KAAK,QACLU,oBAAkB,SAGpBP,EAAA,sBACEK,SAAS,SACTC,QAAYzB,EAAa2B,IAAlB,gBAAqCjB,EAArC,IACPgB,oBAAkB,UAKxBP,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACC,EAAA,EAAD,CAAYlB,OAAQA,IAEpBiB,EAAA,cAACC,EAAA,EAAD,KACGd,EAAMsB,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAQC,EAAXF,EAAWE,QAASC,EAApBH,EAAoBG,YAApB,OACTb,EAAA,cAACC,EAAA,EAAD,CACEa,IAAKH,EAAOpB,KACZA,KAAMoB,EAAOpB,KACbqB,QAASA,EACTG,MACEF,EAAYG,MACRH,EAAYG,MAAMlB,gBAAgBiB,MAClCrB,EAAc,sBAAsBqB,MAE1CE,YAAaJ,EAAYK,KACzBd,MAAOS,EAAYT,OAASO,EAAOpB,WAM3CS,EAAA,cAACC,EAAA,EAAD,CAAYkB,OAAM,eAAiB9B,EAAY+B,QAASxC","file":"component---src-templates-author-tsx-8242f22b821aa94fcdd6.js","sourcesContent":["import { graphql } from 'gatsby';\nimport { FluidObject } from 'gatsby-image';\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\n\nimport {\n  AuthorMeta,\n  Card,\n  CardList,\n  Container,\n  Layout,\n  Pagination,\n} from '@components';\nimport { useSiteMetadata } from '@hooks';\n\nexport interface Author {\n  /** Unique ID of the author. */\n  id: string;\n  /** Display name of the author. */\n  name: string;\n  /** The author's GitHub username.  */\n  github: string;\n  /** The author's Twitter username. */\n  twitter?: string;\n  /** A short description of the author. */\n  bio?: string;\n  /** Used by `gatsby-image` to display the properly-sized avatar image. */\n  avatar?: {\n    childImageSharp: {\n      fluid: FluidObject;\n    };\n  };\n}\n\ninterface PostNode {\n  excerpt: string;\n  frontmatter: {\n    date: string;\n    title: string;\n    image: {\n      childImageSharp: {\n        fluid: FluidObject;\n      };\n    };\n  };\n  fields: {\n    slug: string;\n  };\n}\n\ninterface AuthorTemplateProps {\n  data: {\n    allFile: {\n      nodes: {\n        name: string;\n        childImageSharp: {\n          fluid: FluidObject;\n        };\n      }[];\n    };\n    totalCount: number;\n    allMarkdownRemark: {\n      nodes: PostNode[];\n    };\n    authorYaml: Author;\n  };\n  pageContext: {\n    authorId: string;\n    authorName: string;\n    totalPosts: number;\n    slug: string;\n    limit?: number;\n    skip?: number;\n    numPages?: number;\n    currentPage?: number;\n  };\n}\n\nexport const authorQuery = graphql`\n  query($authorId: String, $skip: Int!, $limit: Int!) {\n    allFile(filter: { absolutePath: { regex: \"/images/default/\" } }) {\n      nodes {\n        name\n        childImageSharp {\n          fluid(maxWidth: 1800) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n    authorYaml(id: { eq: $authorId }) {\n      id\n      name\n      bio\n      github\n      avatar {\n        childImageSharp {\n          fluid(maxWidth: 68) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { author: { eq: $authorId } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      nodes {\n        excerpt(pruneLength: 80)\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          image {\n            childImageSharp {\n              fluid(maxWidth: 1800) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n/** Used by Gatsby to display the list of blog posts by author. */\nconst AuthorTemplate: React.FC<AuthorTemplateProps> = ({\n  data,\n  pageContext,\n}) => {\n  const siteMetadata = useSiteMetadata();\n  const author = data.authorYaml;\n  const allFileNodes = data.allFile.nodes;\n  const { nodes } = data.allMarkdownRemark;\n  const { authorId, authorName, slug, currentPage } = pageContext;\n  const isFirstPage = currentPage === 1;\n  // @TODO+author.tsx: Create new StaticQuery hook, e.g. useDefaultImage\n  const defaultImages: { [key: string]: { fluid: FluidObject } } = {};\n\n  allFileNodes.forEach(\n    ({ name, childImageSharp }) => (defaultImages[name] = childImageSharp),\n  );\n\n  if (!author.avatar) {\n    author.avatar = {\n      childImageSharp: defaultImages['default-avatar-image'],\n    };\n  }\n\n  return (\n    <Layout>\n      {isFirstPage ? (\n        <Helmet>\n          <title>{`Author: \"${authorName}\" - ${siteMetadata.title}`}</title>\n\n          <meta\n            property=\"og:title\"\n            content={`Author: \"${authorName}\" - ${siteMetadata.title}`}\n            name=\"title\"\n            data-react-helmet=\"true\"\n          />\n\n          <meta\n            property=\"og:url\"\n            content={`${siteMetadata.url}/blog/author/${slug}/`}\n            data-react-helmet=\"true\"\n          />\n        </Helmet>\n      ) : (\n        <Helmet>\n          <title>{`Author: \"${authorName}\" - Page ${currentPage} - ${\n            siteMetadata.title\n          }`}</title>\n\n          <meta\n            property=\"og:title\"\n            content={`Author: \"${authorName}\" - Page ${currentPage} - ${\n              siteMetadata.title\n            }`}\n            name=\"title\"\n            data-react-helmet=\"true\"\n          />\n\n          <meta\n            property=\"og:url\"\n            content={`${siteMetadata.url}/blog/author/${slug}/`}\n            data-react-helmet=\"true\"\n          />\n        </Helmet>\n      )}\n\n      <Container>\n        <AuthorMeta author={author} />\n\n        <CardList>\n          {nodes.map(({ fields, excerpt, frontmatter }) => (\n            <Card\n              key={fields.slug}\n              slug={fields.slug}\n              excerpt={excerpt}\n              fluid={\n                frontmatter.image\n                  ? frontmatter.image.childImageSharp.fluid\n                  : defaultImages['default-post-image'].fluid\n              }\n              publishDate={frontmatter.date}\n              title={frontmatter.title || fields.slug}\n            />\n          ))}\n        </CardList>\n      </Container>\n\n      <Pagination prefix={`blog/author/${authorId}`} context={pageContext} />\n    </Layout>\n  );\n};\n\nexport default AuthorTemplate;\n"],"sourceRoot":""}