{"version":3,"sources":["webpack:///./src/pages/magic-login.tsx"],"names":["MagicLoginPage","useState","message","setMessage","siteMetadata","useSiteMetadata","token","location","URLSearchParams","search","get","setTimeout","a","auth","ServiceResolver","authResolver","signIn","email","password","response","ok","SessionStorageHelper","storeJwt","data","navigate","title","description","urlSlug"],"mappings":"+jBAyEeA,UAzDY,WAAM,MACDC,mBAAiB,iBAAxCC,EADwB,KACfC,EADe,KAEzBC,EAAeC,cAgCrB,OACE,kBAAC,IAAD,KAIE,kBAAC,WAAD,MACG,YAAkB,IApCJC,EAoCXC,EAAe,EAAfA,SAEF,OAtCaD,EAqCD,IAAIE,gBAAgBD,EAASE,QAAQC,IAAI,SAnC3DC,WAAU,YAAC,8BAAAC,EAAA,yDACK,KAAVN,GAA0B,OAAVA,EADX,uBAEPH,EAAW,wBAFJ,iCAKHU,EAAOC,kBAAgBC,eALpB,kBAQiBF,EAAKG,OAAO,CAClCC,MAAO,QACPC,SAAUZ,IAVL,QAQDa,EARC,QAcMC,IACXC,IAAqBC,SAASH,EAASI,MACvCC,mBAAS,eAGTrB,EAAYgB,EAASI,KAAuBrB,SAnBvC,kDAuBPC,EAAW,KAAID,SAvBR,0DAyBR,KAWU,kBAAC,WAAD,SAGX,kBAAC,IAAD,CACEuB,MAAUrB,EAAaqB,MAAlB,gBACLC,YAAW,oBAAsBtB,EAAaqB,MAAnC,WACXE,QAAQ,aAEV,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAYzB,GACZ,kBAAC,IAAD","file":"component---src-pages-magic-login-tsx-6f8f882043f2d71301be.js","sourcesContent":["import { Location } from '@reach/router';\nimport React, { FC, Fragment, useState } from 'react';\nimport { navigate } from 'gatsby';\n\nimport { ApiResponse, ErrorResponse, JwtToken, ServiceResolver } from '@api';\nimport {\n  Container,\n  Layout,\n  PageTitle,\n  PageBody,\n  Seo,\n} from '@components/shared';\nimport { useSiteMetadata } from '@hooks';\nimport { SessionStorageHelper } from '@helpers';\n\n/** Page allows members to login via magic link method */\nconst MagicLoginPage: FC = () => {\n  const [message, setMessage] = useState<string>('Logging in...');\n  const siteMetadata = useSiteMetadata();\n\n  const handleLogin = (token: string | null) => {\n    // Adding 600ms set timeout to allow user to view messages\n    setTimeout(async () => {\n      if (token === '' || token === null) {\n        setMessage('Login token missing.');\n        return;\n      }\n      const auth = ServiceResolver.authResolver();\n\n      try {\n        const response = (await auth.signIn({\n          email: 'token',\n          password: token,\n        })) as ApiResponse<JwtToken | ErrorResponse>;\n\n        // TODO: simplify, will always be true\n        if (response.ok) {\n          SessionStorageHelper.storeJwt(response.data as JwtToken);\n          navigate('/projects/');\n        } else {\n          // TODO: remove, will never be executed\n          setMessage((response.data as ErrorResponse).message);\n        }\n      } catch (err) {\n        // TODO: Log error\n        setMessage(err.message);\n      }\n    }, 600);\n  };\n\n  return (\n    <Layout>\n      {/* Using location to read token from URL Param\n          and log in member.\n      */}\n      <Location>\n        {({ location }) => {\n          handleLogin(new URLSearchParams(location.search).get('token'));\n          return <Fragment />;\n        }}\n      </Location>\n      <Seo\n        title={`${siteMetadata.title} - Contact Us`}\n        description={`Contact page for ${siteMetadata.title} website`}\n        urlSlug=\"contact/\"\n      />\n      <Container>\n        <PageTitle>{message}</PageTitle>\n        <PageBody />\n      </Container>\n    </Layout>\n  );\n};\nexport default MagicLoginPage;\n"],"sourceRoot":""}