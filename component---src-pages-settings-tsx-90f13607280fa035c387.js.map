{"version":3,"sources":["webpack:///./src/components/account/content/profile-content.tsx","webpack:///./src/components/account/content/change-password-content.tsx","webpack:///./src/components/account/content/menu-items.tsx","webpack:///./src/components/account/account-settings.tsx","webpack:///./src/pages/settings.tsx"],"names":["UsernameCheck","styled","small","props","isValid","ProfileContent","authContext","useContext","AuthContext","useState","member","user","setUser","username","setUsername","valid","reason","usernameAvailablity","setUsernameAvailability","bio","setBio","technologies","setTechnologies","useEffect","handleClick","a","api","ServiceResolver","apiResolver","updatedUser","editUser","response","handleStatusDisplay","data","setMember","message","handleUsernamValidation","currentUser","u","validateUsername","debouncedUsernameValidation","useCallback","debounce","src","profilePictureUrl","defaultProfileImage","width","height","htmlFor","type","name","id","value","onChange","e","handleUsernameChange","target","hasError","rows","setError","initialValues","userId","undefined","updatedTechnologies","Array","isArray","map","v","userTech","find","t","statusText","FormMessage","ChangePasswordContent","oldPassword","setOldPassword","newPassword","setNewPassword","confirmedNewPassword","setConfirmedNewPassword","formValid","setFormValid","formMessage","setFormMessage","changePassword","password","required","alt","menuItems","content","AccountSettings","error","success","setSuccess","currentMenuItem","setCurrentMenuItem","isLoading","m","onClick","key","active","getMenuItemContent","status","SettingsPage","siteMetadata","useSiteMetadata","UserAuthHelper","isUserAuthenticated","navigate","state","title","description","urlSlug"],"mappings":"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","file":"component---src-pages-settings-tsx-90f13607280fa035c387.js","sourcesContent":["import { debounce } from 'lodash';\nimport React, { FC, useState, useCallback, useContext, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ValueType } from 'react-select/src/types';\n\nimport {\n  ServiceResolver,\n  User,\n  UserTechnology,\n  UserValidation,\n  ApiResponse,\n  Username,\n} from '@api';\nimport { ContentProps } from './menu-items';\nimport {\n  Form,\n  FormLabel,\n  FormInput,\n  FormTextArea,\n  ButtonWrapper,\n  TechnologiesSelect,\n} from '@components/shared/form';\nimport { ApiButton } from '@components/shared/buttons';\nimport { Image } from '@components/shared/side-panels';\nimport { defaultProfileImage } from '@images';\nimport { AuthContext } from '@contexts';\n\ninterface OptionType {\n  label: string;\n  value: string;\n}\n\nconst UsernameCheck = styled.small<{ isValid: boolean }>`\n  color: ${(props) => (props.isValid ? '' : 'red')};\n`;\n\nexport const ProfileContent: FC<ContentProps> = (props) => {\n  const authContext = useContext(AuthContext);\n\n  const [user, setUser] = useState(authContext.member);\n  const [username, setUsername] = useState(authContext.member.username);\n  const [usernameAvailablity, setUsernameAvailability] = useState<\n    UserValidation\n  >({ valid: true, reason: '' });\n  const [bio, setBio] = useState(authContext.member.bio);\n  const [technologies, setTechnologies] = useState(\n    authContext.member.technologies,\n  );\n\n  useEffect(() => {\n    setUser(authContext.member);\n    setUsername(authContext.member.username);\n    setBio(authContext.member.bio);\n    setTechnologies(authContext.member.technologies);\n  }, [authContext.member]);\n\n  const handleClick = async () => {\n    const api = ServiceResolver.apiResolver();\n\n    try {\n      const updatedUser: User = {\n        ...user,\n        username,\n        bio,\n        technologies,\n      };\n      const response = (await api.editUser(updatedUser)) as ApiResponse<User>;\n      if (props.handleStatusDisplay) {\n        props.handleStatusDisplay('success', 'Settings saved');\n      }\n      setUser(response.data as User);\n      if (authContext.setMember) {\n        authContext.setMember(updatedUser);\n      }\n    } catch (err) {\n      if (props.handleStatusDisplay) {\n        props.handleStatusDisplay('error', err.message);\n      }\n    }\n  };\n\n  const handleTechnologiesError = (message: string) => {\n    if (props.handleStatusDisplay) {\n      props.handleStatusDisplay('error', message);\n    }\n  };\n\n  const handleUsernamValidation = async (\n    username: string,\n    currentUser: User | undefined,\n  ) => {\n    const api = ServiceResolver.apiResolver();\n    const u: Username = {\n      username,\n    };\n\n    if (username == currentUser?.username) {\n      setUsernameAvailability({ valid: true, reason: '' });\n      return;\n    }\n\n    try {\n      const response = (await api.validateUsername(u)) as ApiResponse<\n        UserValidation\n      >;\n      setUsernameAvailability(response.data as UserValidation);\n    } catch {\n      setUsernameAvailability({\n        valid: false,\n        reason: 'Failed to validate username',\n      });\n    }\n  };\n\n  const debouncedUsernameValidation = useCallback(\n    debounce(handleUsernamValidation, 450),\n    [],\n  );\n\n  const handleUsernameChange = (username: string) => {\n    setUsername(username);\n    setUsernameAvailability({ valid: true, reason: 'checking...' });\n    debouncedUsernameValidation(username, user);\n  };\n\n  const handleSelectChange = (e: ValueType<OptionType>) => {\n    const userId = user?.id === undefined ? '' : user.id;\n    const updatedTechnologies: UserTechnology[] = Array.isArray(e)\n      ? e.map((v) => {\n          const userTech = technologies.find((t) => t.name == v);\n          if (userTech == undefined) {\n            return { name: v, userId };\n          } else {\n            return { name: v, userId, id: userTech.id };\n          }\n        })\n      : [];\n\n    setTechnologies(updatedTechnologies);\n  };\n\n  return (\n    <Form>\n      <Image\n        src={(user && user.profilePictureUrl) || defaultProfileImage}\n        width=\"64\"\n        height=\"64\"\n      />\n      <FormLabel htmlFor=\"username\">Username</FormLabel>\n      <FormInput\n        type=\"text\"\n        name=\"username\"\n        id=\"username\"\n        value={username}\n        onChange={(e) => handleUsernameChange(e.target.value)}\n        hasError={!usernameAvailablity.valid}\n      />\n      {usernameAvailablity.reason != '' && username != user?.username && (\n        <UsernameCheck isValid={usernameAvailablity.valid}>\n          {usernameAvailablity.reason}\n        </UsernameCheck>\n      )}\n      <br />\n      <br />\n\n      <FormLabel htmlFor=\"bio\">Bio</FormLabel>\n\n      <FormTextArea\n        name=\"bio\"\n        id=\"bio\"\n        onChange={(e) => setBio(e.target.value)}\n        value={bio}\n        rows={5}\n      >\n        {bio}\n      </FormTextArea>\n      <br />\n\n      <FormLabel htmlFor=\"technologies\">Technologies</FormLabel>\n      {/* TODO technologies are not being rendered on refresh */}\n      <TechnologiesSelect\n        name=\"technologies\"\n        id=\"technologies\"\n        setError={handleTechnologiesError}\n        initialValues={technologies}\n        setTechnologies={handleSelectChange}\n      />\n\n      <ButtonWrapper>\n        <ApiButton handleClick={handleClick} statusText=\"Saving\">\n          Save\n        </ApiButton>\n      </ButtonWrapper>\n    </Form>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport {\n  Form,\n  FormLabel,\n  FormInput,\n  ButtonWrapper,\n} from '@components/shared/form';\nimport { ApiButton } from '@components/shared/buttons';\nimport { ServiceResolver, ChangePassword, ApiResponse } from '@api';\nimport { ContentProps } from './menu-items';\nimport styled from 'styled-components';\n\nconst FormMessage = styled.small<{ isValid: boolean }>`\n  color: ${(props) => (props.isValid ? '' : 'red')};\n`;\n\nexport const ChangePasswordContent: FC<ContentProps> = (props) => {\n  const [oldPassword, setOldPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmedNewPassword, setConfirmedNewPassword] = useState('');\n  const [formValid, setFormValid] = useState(true);\n  const [formMessage, setFormMessage] = useState('');\n\n  const handleCurrentPasswordChange = (password: string) => {\n    setOldPassword(password);\n  };\n\n  const handleNewPasswordChange = (password: string) => {\n    setNewPassword(password);\n  };\n\n  const handleConfirmNewPasswordChange = (password: string) => {\n    setConfirmedNewPassword(password);\n  };\n\n  const handleClick = async () => {\n    if (\n      oldPassword === '' ||\n      newPassword === '' ||\n      confirmedNewPassword === ''\n    ) {\n      setFormMessage('Provide a value for all fields.');\n      setFormValid(false);\n      return;\n    }\n\n    if (newPassword !== confirmedNewPassword) {\n      setFormMessage(\"New passwords don't match.\");\n      setFormValid(false);\n      return;\n    }\n\n    const api = ServiceResolver.apiResolver();\n\n    try {\n      const changePassword: ChangePassword = {\n        oldPassword,\n        newPassword,\n        confirmedNewPassword,\n      };\n\n      (await api.changePassword(changePassword)) as ApiResponse<ChangePassword>;\n\n      setOldPassword('');\n      setNewPassword('');\n      setConfirmedNewPassword('');\n      if (props.handleStatusDisplay) {\n        props.handleStatusDisplay('success', 'Password updated.');\n      }\n    } catch (err) {\n      if (props.handleStatusDisplay) {\n        props.handleStatusDisplay('error', err.message);\n      }\n    }\n  };\n\n  return (\n    <Form>\n      <FormLabel htmlFor=\"old-password\">Old Password</FormLabel>\n      <FormInput\n        type=\"password\"\n        name=\"old-password\"\n        id=\"old-password\"\n        value={oldPassword}\n        onChange={(e) => handleCurrentPasswordChange(e.target.value)}\n        hasError={false}\n        required={true}\n        alt=\"password-field\"\n      />\n      <br />\n      <FormLabel htmlFor=\"new-password\">New Password</FormLabel>\n      <FormInput\n        type=\"password\"\n        name=\"new-password\"\n        id=\"new-password\"\n        value={newPassword}\n        onChange={(e) => handleNewPasswordChange(e.target.value)}\n        hasError={false}\n        required={true}\n        alt=\"password-field\"\n      />\n      <br />\n      <FormLabel htmlFor=\"confirmed-new-password\">\n        Confirm New Password\n      </FormLabel>\n      <FormInput\n        type=\"password\"\n        name=\"confirmed-new-password\"\n        id=\"confirmed-new-password\"\n        value={confirmedNewPassword}\n        onChange={(e) => handleConfirmNewPasswordChange(e.target.value)}\n        hasError={false}\n        required={true}\n        alt=\"password-field\"\n      />\n      <br />\n      {formMessage !== '' && (\n        <FormMessage isValid={formValid}>{formMessage}</FormMessage>\n      )}\n      <ButtonWrapper>\n        <ApiButton handleClick={handleClick} statusText=\"Saving\">\n          Save\n        </ApiButton>\n      </ButtonWrapper>\n    </Form>\n  );\n};\n","import React, { ReactElement } from 'react';\nimport { ProfileContent } from './profile-content';\nimport { ChangePasswordContent } from './change-password-content';\nimport { StatusType } from '../account-settings';\n\nexport interface ContentProps {\n  handleStatusDisplay?: (status: StatusType, message: string) => void;\n}\n\ninterface MenuItem {\n  name: string;\n  content: ReactElement;\n}\n\nexport const menuItems: MenuItem[] = [\n  {\n    name: 'Change Password',\n    content: <ChangePasswordContent />,\n  },\n  {\n    name: 'Edit Profile',\n    content: <ProfileContent />,\n  },\n];\n\nexport const getMenuItemContent = (name: string, props: ContentProps) => {\n  switch (name) {\n    case 'Change Password':\n      return <ChangePasswordContent {...props} />;\n    case 'Edit Profile':\n      return <ProfileContent {...props} />;\n  }\n};\n","import React, { FC, useState } from 'react';\nimport { MainContent } from '@components/shared/containers/main-content';\nimport { SettingsContainer } from '@components/shared/containers';\nimport { ContainerSidePanel } from '@components/shared/side-panels';\nimport { menuItems, getMenuItemContent } from './content/menu-items';\nimport { MenuItem } from '@components/shared/side-panels/container-side-panel';\n\nexport type StatusType = 'success' | 'error';\n\nexport const AccountSettings: FC = () => {\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [currentMenuItem, setCurrentMenuItem] = useState(menuItems[0].name);\n\n  const handleMenuItemClick = (name: string) => {\n    setCurrentMenuItem(name);\n  };\n\n  const handleStatusDisplay = (status: StatusType, message: string) => {\n    switch (status) {\n      case 'success':\n        setSuccess(message);\n        break;\n      case 'error':\n        setError(message);\n      default:\n        break;\n    }\n  };\n\n  return (\n    <SettingsContainer\n      error={error}\n      setError={setError}\n      success={success}\n      setSuccess={setSuccess}\n      isLoading={false}\n    >\n      <ContainerSidePanel>\n        {menuItems.map((m) => {\n          return (\n            <MenuItem\n              onClick={() => handleMenuItemClick(m.name)}\n              key={m.name}\n              active={m.name === currentMenuItem}\n            >\n              {m.name}\n            </MenuItem>\n          );\n        })}\n      </ContainerSidePanel>\n      <MainContent>\n        {getMenuItemContent(currentMenuItem, { handleStatusDisplay })}\n      </MainContent>\n    </SettingsContainer>\n  );\n};\n","import { navigate } from 'gatsby';\nimport React, { FC, useEffect } from 'react';\n\nimport { Layout, Seo } from '@components/shared';\nimport { AccountSettings } from '@components/account/account-settings';\nimport { UserAuthHelper } from '@helpers';\nimport { useSiteMetadata } from '@hooks';\n\nconst SettingsPage: FC = () => {\n  const siteMetadata = useSiteMetadata();\n\n  useEffect(() => {\n    if (!UserAuthHelper.isUserAuthenticated()) {\n      navigate('/signin', {\n        state: {\n          message: 'You need to be signed in to edit your account settings',\n        },\n      });\n    }\n  }, []);\n\n  return (\n    <Layout>\n      <Seo\n        title={`Account Settings`}\n        description={`Account Settings Page For ${siteMetadata.title}`}\n        urlSlug=\"settings/\"\n      />\n      <AccountSettings />\n    </Layout>\n  );\n};\n\nexport default SettingsPage;\n"],"sourceRoot":""}