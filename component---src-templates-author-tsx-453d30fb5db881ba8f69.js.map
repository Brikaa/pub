{"version":3,"sources":["webpack:///./src/templates/author.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","authorQuery","react__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","n","_components__WEBPACK_IMPORTED_MODULE_2__","_hooks__WEBPACK_IMPORTED_MODULE_3__","AuthorTemplate","_ref","data","pageContext","siteMetadata","useSiteMetadata","defaultAvatarImage","useDefaultAvatarImage","defaultPostImage","useDefaultPostImage","author","authorYaml","nodes","allMarkdownRemark","authorId","authorName","slug","currentPage","isFirstPage","avatar","childImageSharp","a","title","property","content","name","data-react-helmet","url","map","_ref2","fields","excerpt","frontmatter","key","fluid","image","publishDate","date","prefix","context"],"mappings":"0FAEAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,gCAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAA,KAAAO,EAAAP,EAAAQ,EAAAF,GAAAG,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAwEaI,EAAW,aAkITO,UAtFuC,SAAAC,GAGhD,IAFJC,EAEID,EAFJC,KACAC,EACIF,EADJE,YAEMC,EAAeC,cACfC,EAAqBC,cACrBC,EAAmBC,cACnBC,EAASR,EAAKS,WACZC,EAAUV,EAAKW,kBAAfD,MACAE,EAA4CX,EAA5CW,SAAUC,EAAkCZ,EAAlCY,WAAYC,EAAsBb,EAAtBa,KAAMC,EAAgBd,EAAhBc,YAC9BC,EAA8B,IAAhBD,EAQpB,OANKP,EAAOS,SACVT,EAAOS,OAAS,CACdC,gBAAiBd,EAAmBc,kBAKtC1B,EAAA,cAACI,EAAA,EAAD,KACGoB,EACCxB,EAAA,cAACE,EAAAyB,EAAD,KACE3B,EAAA,uCAAoBqB,EAApB,OAAqCX,EAAakB,OAElD5B,EAAA,sBACE6B,SAAS,WACTC,QAAO,YAAcT,EAAd,OAA+BX,EAAakB,MACnDG,KAAK,QACLC,oBAAkB,SAGpBhC,EAAA,sBACE6B,SAAS,SACTC,QAAYpB,EAAauB,IAAlB,gBAAqCX,EAArC,IACPU,oBAAkB,UAItBhC,EAAA,cAACE,EAAAyB,EAAD,KACE3B,EAAA,uCAAoBqB,EAApB,YAA0CE,EAA1C,MACEb,EAAakB,OAGf5B,EAAA,sBACE6B,SAAS,WACTC,QAAO,YAAcT,EAAd,YAAoCE,EAApC,MACLb,EAAakB,MAEfG,KAAK,QACLC,oBAAkB,SAGpBhC,EAAA,sBACE6B,SAAS,SACTC,QAAYpB,EAAauB,IAAlB,gBAAqCX,EAArC,IACPU,oBAAkB,UAKxBhC,EAAA,cAACI,EAAA,EAAD,KACEJ,EAAA,cAACI,EAAA,EAAD,CAAYY,OAAQA,IAEpBhB,EAAA,cAACI,EAAA,EAAD,KACGc,EAAMgB,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAQC,EAAXF,EAAWE,QAASC,EAApBH,EAAoBG,YAApB,OACTtC,EAAA,cAACI,EAAA,EAAD,CACEmC,IAAKH,EAAOd,KACZA,KAAMc,EAAOd,KACbe,QAASA,EACTG,MACEF,EAAYG,MACRH,EAAYG,MAAMf,gBAAgBc,MAClC1B,EAAiBY,gBAAgBc,MAEvCE,YAAaJ,EAAYK,KACzBf,MAAOU,EAAYV,OAASQ,EAAOd,WAM3CtB,EAAA,cAACI,EAAA,EAAD,CAAYwC,OAAM,eAAiBxB,EAAYyB,QAASpC","file":"component---src-templates-author-tsx-453d30fb5db881ba8f69.js","sourcesContent":["import { graphql } from 'gatsby';\nimport { FluidObject } from 'gatsby-image';\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\n\nimport {\n  AuthorMeta,\n  Card,\n  CardList,\n  Container,\n  Layout,\n  Pagination,\n} from '@components';\nimport {\n  useDefaultAvatarImage,\n  useDefaultPostImage,\n  useSiteMetadata,\n} from '@hooks';\n\nexport interface Author {\n  /** Unique ID of the author. */\n  id: string;\n  /** Display name of the author. */\n  name: string;\n  /** The author's GitHub username.  */\n  github: string;\n  /** The author's Twitter username. */\n  twitter?: string;\n  /** A short description of the author. */\n  bio?: string;\n  /** Used by `gatsby-image` to display the properly-sized avatar image. */\n  avatar?: {\n    childImageSharp: {\n      fluid: FluidObject;\n    };\n  };\n}\n\ninterface PostNode {\n  excerpt: string;\n  frontmatter: {\n    date: string;\n    title: string;\n    image: {\n      childImageSharp: {\n        fluid: FluidObject;\n      };\n    };\n  };\n  fields: {\n    slug: string;\n  };\n}\n\ninterface AuthorTemplateProps {\n  data: {\n    totalCount: number;\n    allMarkdownRemark: {\n      nodes: PostNode[];\n    };\n    authorYaml: Author;\n  };\n  pageContext: {\n    authorId: string;\n    authorName: string;\n    totalPosts: number;\n    slug: string;\n    limit?: number;\n    skip?: number;\n    numPages?: number;\n    currentPage?: number;\n  };\n}\n\nexport const authorQuery = graphql`\n  query($authorId: String, $skip: Int!, $limit: Int!) {\n    authorYaml(id: { eq: $authorId }) {\n      id\n      name\n      bio\n      github\n      avatar {\n        childImageSharp {\n          fluid(maxWidth: 68) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { author: { eq: $authorId } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      nodes {\n        excerpt(pruneLength: 80)\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          image {\n            childImageSharp {\n              fluid(maxWidth: 1800) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n/** Used by Gatsby to display the list of blog posts by author. */\nconst AuthorTemplate: React.FC<AuthorTemplateProps> = ({\n  data,\n  pageContext,\n}) => {\n  const siteMetadata = useSiteMetadata();\n  const defaultAvatarImage = useDefaultAvatarImage();\n  const defaultPostImage = useDefaultPostImage();\n  const author = data.authorYaml;\n  const { nodes } = data.allMarkdownRemark;\n  const { authorId, authorName, slug, currentPage } = pageContext;\n  const isFirstPage = currentPage === 1;\n\n  if (!author.avatar) {\n    author.avatar = {\n      childImageSharp: defaultAvatarImage.childImageSharp,\n    };\n  }\n\n  return (\n    <Layout>\n      {isFirstPage ? (\n        <Helmet>\n          <title>{`Author: \"${authorName}\" - ${siteMetadata.title}`}</title>\n\n          <meta\n            property=\"og:title\"\n            content={`Author: \"${authorName}\" - ${siteMetadata.title}`}\n            name=\"title\"\n            data-react-helmet=\"true\"\n          />\n\n          <meta\n            property=\"og:url\"\n            content={`${siteMetadata.url}/blog/author/${slug}/`}\n            data-react-helmet=\"true\"\n          />\n        </Helmet>\n      ) : (\n        <Helmet>\n          <title>{`Author: \"${authorName}\" - Page ${currentPage} - ${\n            siteMetadata.title\n          }`}</title>\n\n          <meta\n            property=\"og:title\"\n            content={`Author: \"${authorName}\" - Page ${currentPage} - ${\n              siteMetadata.title\n            }`}\n            name=\"title\"\n            data-react-helmet=\"true\"\n          />\n\n          <meta\n            property=\"og:url\"\n            content={`${siteMetadata.url}/blog/author/${slug}/`}\n            data-react-helmet=\"true\"\n          />\n        </Helmet>\n      )}\n\n      <Container>\n        <AuthorMeta author={author} />\n\n        <CardList>\n          {nodes.map(({ fields, excerpt, frontmatter }) => (\n            <Card\n              key={fields.slug}\n              slug={fields.slug}\n              excerpt={excerpt}\n              fluid={\n                frontmatter.image\n                  ? frontmatter.image.childImageSharp.fluid\n                  : defaultPostImage.childImageSharp.fluid\n              }\n              publishDate={frontmatter.date}\n              title={frontmatter.title || fields.slug}\n            />\n          ))}\n        </CardList>\n      </Container>\n\n      <Pagination prefix={`blog/author/${authorId}`} context={pageContext} />\n    </Layout>\n  );\n};\n\nexport default AuthorTemplate;\n"],"sourceRoot":""}