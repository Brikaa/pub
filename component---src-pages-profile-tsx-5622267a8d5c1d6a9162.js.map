{"version":3,"sources":["webpack:///./src/components/shared/containers/main-content.tsx","webpack:///(webpack)/buildin/module.js","webpack:///./src/pages/profile.tsx","webpack:///./src/components/shared/side-panels/container-side-panel.tsx","webpack:///./src/components/shared/containers/base-container.tsx","webpack:///./src/components/shared/containers/profile-container.tsx","webpack:///./src/components/shared/containers/settings-container.tsx","webpack:///./src/components/shared/containers/account-settings.tsx","webpack:///./src/components/shared/side-panels/index.ts"],"names":["MainContent","styled","div","module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i","ProfilePage","siteMetadata","useSiteMetadata","useEffect","location","pathname","startsWith","UserAuthHelper","isUserAuthenticated","userId","getUserId","navigate","state","message","title","description","urlSlug","path","ContainerSidePanel","theme","sizes","width","small","Summary","Image","img","MenuItem","b","props","active","colors","shadow","BaseContainer","hasBorder","Wrapper","boxes","padding","section","smallTop","ProfileContainer","id","useState","user","setUser","error","setError","isLoading","setIsLoading","api","ServiceResolver","apiResolver","a","getUser","response","ok","data","fetchContent","type","onClick","src","profilePictureUrl","defaultProfileImage","alt","username","to","bio","technologies","style","marginTop","map","t","data-testid","key","name","SettingsContainer","success","setSuccess","isValid"],"mappings":"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","file":"component---src-pages-profile-tsx-5622267a8d5c1d6a9162.js","sourcesContent":["import styled from 'styled-components';\n\nexport const MainContent = styled.div`\n  margin: 1.25em;\n  flex: 0.7;\n  font-size: 1em;\n`;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import { Router } from '@reach/router';\nimport { navigate } from 'gatsby';\nimport React, { FC, useEffect } from 'react';\n\nimport { Layout, Seo } from '@components/shared';\nimport { ProfileContainer } from '@components/shared/containers';\nimport { UserAuthHelper } from '@helpers';\nimport { useSiteMetadata } from '@hooks';\n\nconst ProfilePage: FC = () => {\n  const siteMetadata = useSiteMetadata();\n\n  useEffect(() => {\n    if (location.pathname.startsWith('/profile')) {\n      if (UserAuthHelper.isUserAuthenticated()) {\n        const userId = UserAuthHelper.getUserId();\n        navigate(`/profile/${userId}`);\n      } else {\n        navigate('/signin', {\n          state: { message: 'You need to be signed in' },\n        });\n      }\n    }\n  }, []);\n\n  return (\n    <Layout>\n      <Seo\n        title={`Profile`}\n        description={`Profile Page For ${siteMetadata.title}`}\n        urlSlug=\"profile/\"\n      />\n      <Router>\n        <ProfileContainer path=\"profile/:id\" />\n      </Router>\n    </Layout>\n  );\n};\n\nexport default ProfilePage;\n","import styled from 'styled-components';\n\ninterface MenuItemProp {\n  readonly active?: boolean;\n}\nexport const ContainerSidePanel = styled.div`\n  flex: 0.3;\n  border: none;\n  padding-top: 2em;\n\n  @media screen and (min-width: ${({ theme }) => theme.sizes.width.small}) {\n    border-right: 1px solid lightgray;\n  }\n`;\n\nexport const Summary = styled.div`\n  color: black;\n  text-align: center;\n  width: 100%;\n  margin: 0 auto 1em;\n`;\n\nexport const Image = styled.img`\n  height: auto;\n  border-radius: 100px;\n  margin-bottom: 0;\n`;\n\nexport const Title = styled.b`\n  font-size: 16px;\n  margin-top: -10px;\n`;\n\nexport const ButtonContainer = styled.div`\n  text-align: center;\n  margin-top: 20px;\n`;\n\nexport const MenuItemContainer = styled.div`\n  margin-top: 20px;\n`;\n\nexport const MenuItem = styled.div<MenuItemProp>`\n  color: #000000;\n  font-weight: ${(props) => (props.active ? 'bold' : '400')};\n  border-left: ${(props) => (props.active ? 'black solid 2px' : '')};\n  padding: 5px 15px;\n  :hover {\n    background: ${({ theme }) => theme.colors.shadow};\n    cursor: pointer;\n  }\n`;\n","import styled from 'styled-components';\n\ntype BaseContainerProps = {\n  hasBorder?: boolean;\n};\n\nexport const BaseContainer = styled.div<BaseContainerProps>`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n\n  @media screen and (min-width: ${({ theme }) => theme.sizes.width.small}) {\n    border: ${({ hasBorder }) => (hasBorder ? '1px solid lightgray' : 'none')};\n    flex-direction: row;\n  }\n`;\n","import { Link } from 'gatsby';\nimport React, { FC, Fragment, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { BaseContainer } from './base-container';\nimport { MainContent } from './main-content';\nimport { FormLabel } from '../form';\nimport { ProfileTechPill } from '../pills';\nimport { Ribbon, CloseButton } from '../ribbons';\nimport { ContainerSidePanel, Summary } from '../side-panels';\nimport { ApiResponse, ErrorResponse, ServiceResolver, User } from '@api';\nimport { Loader } from '@components/shared';\nimport { UserAuthHelper } from '@helpers';\nimport { defaultProfileImage } from '@images';\nimport { Button } from '../buttons';\n\ntype ProfileContainerProps = {\n  id?: string;\n  path: string;\n};\n\nconst Image = styled.img`\n  border-radius: 50%;\n  max-width: 40%;\n  margin-bottom: 0;\n`;\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  padding: 0;\n  min-height: 50vh;\n\n  @media screen and (min-width: ${({ theme }) => theme.sizes.width.small}) {\n    padding: ${({ theme }) => theme.boxes.padding.section.smallTop};\n  }\n`;\n\nexport const ProfileContainer: FC<ProfileContainerProps> = ({ id }) => {\n  const [user, setUser] = useState<User>();\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const api = ServiceResolver.apiResolver();\n\n    const fetchContent = async () => {\n      try {\n        const response = (await api.getUser(id || '')) as ApiResponse<\n          User | ErrorResponse\n        >;\n\n        // TODO: simplify, will always true in try\n        if (response.ok) {\n          const user = response.data as User;\n          setUser(user);\n        } else {\n          // TODO: remove, currently this will never execute.\n          setError((response.data as ErrorResponse).message);\n        }\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchContent();\n  }, [id]);\n\n  return (\n    <Wrapper>\n      {isLoading && <Loader />}\n      {error && (\n        <Ribbon type=\"danger\">\n          {error}{' '}\n          <CloseButton onClick={() => setError(null)}>&#10006;</CloseButton>\n        </Ribbon>\n      )}\n\n      {!isLoading && user && (\n        <BaseContainer>\n          <ContainerSidePanel>\n            <Summary>\n              <Image\n                src={user.profilePictureUrl || defaultProfileImage}\n                alt=\"Profile Picture\"\n              />\n              <Summary>{user.username}</Summary>\n              {UserAuthHelper.isUserAuthenticated() && (\n                <Link to=\"/settings\">\n                  <Button>Edit Profile</Button>\n                </Link>\n              )}\n            </Summary>\n          </ContainerSidePanel>\n          <MainContent>\n            {user.bio && (\n              <Fragment>\n                <FormLabel>Bio</FormLabel>\n                <p>{user.bio}</p>\n              </Fragment>\n            )}\n\n            {user.technologies && (\n              <Fragment>\n                <FormLabel>Technologies</FormLabel>\n                <div style={{ marginTop: '0.4em' }}>\n                  {user.technologies.map((t) => (\n                    <ProfileTechPill data-testid=\"technology\" key={t.name}>\n                      {t.name}\n                    </ProfileTechPill>\n                  ))}\n                </div>\n              </Fragment>\n            )}\n          </MainContent>\n        </BaseContainer>\n      )}\n    </Wrapper>\n  );\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\nimport { BaseContainer } from './base-container';\nimport { Ribbon, CloseButton } from '../ribbons';\nimport { Loader } from '@components/shared';\n\ntype SettingsContainerProps = {\n  error: string | null | undefined;\n  isLoading: boolean;\n  setError: Function;\n  success: string | null | undefined;\n  setSuccess: Function;\n};\n\nconst Wrapper = styled.div`\n  padding: ${({ theme }) => theme.boxes.padding.section.smallTop};\n  width: 100%;\n  min-height: 50vh;\n\n  @media screen and (max-width: ${({ theme }) => theme.sizes.width.small}) {\n    padding: 0;\n  }\n`;\n\nexport const SettingsContainer: FC<SettingsContainerProps> = ({\n  children,\n  error,\n  setError,\n  isLoading,\n  success,\n  setSuccess,\n}) => {\n  return (\n    <Wrapper>\n      {isLoading && <Loader />}\n\n      {error && (\n        <Ribbon type=\"danger\">\n          {error}{' '}\n          <CloseButton onClick={() => setError(null)}>&#10006;</CloseButton>\n        </Ribbon>\n      )}\n\n      {success && (\n        <Ribbon type=\"success\">\n          {success}{' '}\n          <CloseButton onClick={() => setSuccess(null)}>&#10006;</CloseButton>\n        </Ribbon>\n      )}\n\n      {!isLoading && <BaseContainer hasBorder>{children}</BaseContainer>}\n    </Wrapper>\n  );\n};\n","import React, {\n  ChangeEvent,\n  FC,\n  useEffect,\n  useState,\n  useCallback,\n} from 'react';\nimport { debounce } from 'lodash';\nimport { MainContent } from './main-content';\nimport { SettingsContainer } from './settings-container';\nimport { ApiButton } from '../buttons';\nimport { Form } from '../form';\nimport {\n  FormLabel,\n  FormInput,\n  FormTextArea,\n  ButtonWrapper,\n  TechnologiesSelect,\n} from '../form/controls';\nimport { MenuItem } from '../side-panels/container-side-panel';\nimport { ContainerSidePanel, Image } from '../side-panels';\nimport {\n  ApiResponse,\n  ErrorResponse,\n  ServiceResolver,\n  User,\n  Username,\n  UserTechnology,\n  UserValidation,\n} from '@api';\nimport { UserAuthHelper } from '@helpers';\nimport { defaultProfileImage } from '@images';\nimport { ValueType } from 'react-select/src/types';\nimport styled from 'styled-components';\n\ninterface OptionType {\n  label: string;\n  value: string;\n}\n\nconst UsernameCheck = styled.small<{ isValid: boolean }>`\n  color: ${(props) => (props.isValid ? '' : 'red')};\n`;\n\nexport const AccountSettings: FC = () => {\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [user, setUser] = useState<User>();\n  const [username, setUsername] = useState('');\n  const [usernameAvailablity, setUsernameAvailability] = useState<\n    UserValidation\n  >({ valid: true, reason: '' });\n  const [bio, setBio] = useState('');\n  const [technologies, setTechnologies] = useState<UserTechnology[]>([]);\n\n  // TODO: Read authentication state via Auth Context\n  useEffect(() => {\n    const api = ServiceResolver.apiResolver();\n\n    const fetchContent = async () => {\n      try {\n        const userId = UserAuthHelper.getUserId();\n        const response = (await api.getUser(userId)) as ApiResponse<\n          User | ErrorResponse\n        >;\n\n        // TODO: simplift, response.ok will always be true in try block\n        if (response.ok) {\n          const user = response.data as User;\n          setUser(user);\n          setUsername(user.username);\n          setBio(user.bio);\n          setTechnologies(user.technologies ?? []);\n        } else {\n          // TODO: remove, currently this will never execute.\n          setError((response.data as ErrorResponse).message);\n        }\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchContent();\n  }, []);\n\n  const handleClick = async () => {\n    const api = ServiceResolver.apiResolver();\n\n    try {\n      const updatedUser: User = {\n        ...user,\n        username,\n        bio,\n        technologies,\n      };\n      const response = (await api.editUser(updatedUser)) as ApiResponse<\n        User | ErrorResponse\n      >;\n\n      if (response.ok) {\n        setSuccess('Settings saved');\n      } else {\n        // TODO: move to try catch, currently this will never execute.\n        setError((response.data as ErrorResponse).message);\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const handleUsernamValidation = async (\n    username: string,\n    currentUser: User | undefined,\n  ) => {\n    const api = ServiceResolver.apiResolver();\n    const u: Username = {\n      username,\n    };\n\n    if (username == currentUser?.username) {\n      setUsernameAvailability({ valid: true, reason: '' });\n      return;\n    }\n\n    try {\n      const response = (await api.validateUsername(u)) as ApiResponse<\n        UserValidation | ErrorResponse\n      >;\n\n      // TODO: remove, will always be true inside try\n      if (response.ok) {\n        setUsernameAvailability(response.data as UserValidation);\n      }\n    } catch {\n      setUsernameAvailability({\n        valid: false,\n        reason: 'Failed to validate username',\n      });\n    }\n  };\n\n  const debouncedUsernameValidation = useCallback(\n    debounce(handleUsernamValidation, 450),\n    [],\n  );\n\n  const handleUsernameChange = (username: string) => {\n    setUsername(username);\n    setUsernameAvailability({ valid: true, reason: 'checking...' });\n    debouncedUsernameValidation(username, user);\n  };\n\n  const handleSelectChange = (e: ValueType<OptionType>) => {\n    const userId = user?.id === undefined ? '' : user.id;\n    const updatedTechnologies: UserTechnology[] = Array.isArray(e)\n      ? e.map((v) => {\n          const userTech = technologies.find((t) => t.name == v);\n          if (userTech == undefined) {\n            return { name: v, userId };\n          } else {\n            return { name: v, userId, id: userTech.id };\n          }\n        })\n      : [];\n\n    setTechnologies(updatedTechnologies);\n  };\n\n  return (\n    <SettingsContainer\n      error={error}\n      setError={setError}\n      success={success}\n      setSuccess={setSuccess}\n      isLoading={isLoading}\n    >\n      <ContainerSidePanel>\n        <MenuItem>General</MenuItem>\n      </ContainerSidePanel>\n      <MainContent>\n        <Form>\n          <Image\n            src={(user && user.profilePictureUrl) || defaultProfileImage}\n            width=\"64\"\n            height=\"64\"\n          />\n          <FormLabel htmlFor=\"username\">Username</FormLabel>\n          <FormInput\n            type=\"text\"\n            name=\"username\"\n            id=\"username\"\n            value={username}\n            onChange={(e) => handleUsernameChange(e.target.value)}\n            hasError={!usernameAvailablity.valid}\n          />\n          {usernameAvailablity.reason != '' && username != user?.username && (\n            <UsernameCheck isValid={usernameAvailablity.valid}>\n              {usernameAvailablity.reason}\n            </UsernameCheck>\n          )}\n          <br />\n          <br />\n\n          <FormLabel htmlFor=\"bio\">Bio</FormLabel>\n\n          <FormTextArea\n            name=\"bio\"\n            id=\"bio\"\n            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n              setBio(e.target.value)\n            }\n            value={bio}\n            rows={5}\n          >\n            {bio}\n          </FormTextArea>\n          <br />\n\n          <FormLabel htmlFor=\"technologies\">Technologies</FormLabel>\n          {user && user.technologies && (\n            <TechnologiesSelect\n              name=\"technologies\"\n              id=\"technologies\"\n              setError={setError}\n              initialValues={technologies}\n              setTechnologies={handleSelectChange}\n            />\n          )}\n\n          <ButtonWrapper>\n            <ApiButton handleClick={handleClick} statusText=\"Saving\">\n              Save\n            </ApiButton>\n          </ButtonWrapper>\n        </Form>\n      </MainContent>\n    </SettingsContainer>\n  );\n};\n","export {\n  ContainerSidePanel,\n  Summary,\n  Image,\n  Title,\n  ButtonContainer,\n} from './container-side-panel';\n"],"sourceRoot":""}